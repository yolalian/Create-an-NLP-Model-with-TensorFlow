# -*- coding: utf-8 -*-
"""Proyek Pertama : Membuat Model NLP dengan TensorFlow.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1w9Vvnxau_bZ7v5QFobkK3NGpNTvAk8MK

Nama : Yolanda Ester Berliana Ritonga

Email : yolandaesterbrtg@gmail.com

Kelas : Belajar Pengembangan Machine Learning

**Import Library**
"""

import tensorflow as tf
import pandas as pd
import nltk
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
from tensorflow.keras.preprocessing.text import Tokenizer
from tensorflow.keras.preprocessing.sequence import pad_sequences
from tensorflow.keras.callbacks import EarlyStopping

nltk.download('stopwords')
nltk.download('punkt')

"""**Membaca Data**"""

data = pd.read_csv('bbc-text.csv')

total_data = data.shape[0]
print("Total data:", total_data)

data.columns

data

"""**Preprocessing Data**"""

category = pd.get_dummies(data.category)

new_data = pd.concat([data, category], axis=1)
new_data = new_data.drop(columns='category')

"""**Preprocessing Teks**"""

stop_words = set(stopwords.words('english'))

def preprocess_text(text):
    words = word_tokenize(text)
    filtered_sentence = [w for w in words if not w.lower() in stop_words]
    return ' '.join(filtered_sentence)

new_data['text'] = new_data['text'].apply(preprocess_text)

"""**Tokenisasi dan Padding**"""

X = new_data['text'].values
y = new_data[['business', 'entertainment', 'politics', 'sport', 'tech']].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

print("Jumlah data pelatihan:", len(X_train))
print("Jumlah data pengujian:", len(X_test))

tokenizer = Tokenizer(num_words=5000, oov_token='x')
tokenizer.fit_on_texts(X_train)
tokenizer.fit_on_texts(X_test)

sequence_train = tokenizer.texts_to_sequences(X_train)
sequence_test = tokenizer.texts_to_sequences(X_test)

padded_train = pad_sequences(sequence_train)
padded_test = pad_sequences(sequence_test)

"""**Membuat Model**"""

model = tf.keras.Sequential([
    tf.keras.layers.Embedding(input_dim=5000, output_dim=16),
    tf.keras.layers.LSTM(32),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(64, activation='relu'),
    tf.keras.layers.Dense(5, activation='softmax')
])

"""**Kompilasi Model**"""

model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(learning_rate=0.001), metrics=['accuracy'])

"""**Callback dan Early Stopping**"""

class MyCallback(tf.keras.callbacks.Callback):
    def on_epoch_end(self, epoch, logs={}):
        target_accuracy = 0.90
        target_val_accuracy = 0.90

        current_accuracy = logs.get('accuracy', 0)
        current_val_accuracy = logs.get('val_accuracy', 0)

        if current_accuracy >= target_accuracy and current_val_accuracy >= target_val_accuracy:
            print("\n mencapai target!")
            self.model.stop_training = True

early_stopping = EarlyStopping(monitor='val_accuracy', patience=5, restore_best_weights=True)

callbacks = [
    MyCallback(),
    early_stopping
]

"""**Pelatihan Model**"""

history = model.fit(
    padded_train,
    y_train,
    epochs=50,
    validation_data=(padded_test, y_test),
    verbose=2,
    callbacks=callbacks
)

"""**Akurasi**"""

train_accuracy = history.history['accuracy'][-1] * 100
val_accuracy = history.history['val_accuracy'][-1] * 100

print(f'Final Training Accuracy: {train_accuracy:.2f}%')
print(f'Final Validation Accuracy: {val_accuracy:.2f}%')

"""**Visualisasi Hasil Pelatihan**"""

training_accuracy = history.history['accuracy']
validation_accuracy = history.history['val_accuracy']
training_loss = history.history['loss']
validation_loss = history.history['val_loss']
epochs = range(1, len(training_accuracy) + 1)

plt.plot(epochs, training_accuracy, label='Training Accuracy')
plt.plot(epochs, validation_accuracy, label='Validation Accuracy')
plt.title('Training and Validation Accuracy')
plt.xlabel('Epochs')
plt.ylabel('Accuracy')
plt.legend()
plt.show()

plt.plot(epochs, training_loss, label='Training Loss')
plt.plot(epochs, validation_loss, label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epochs')
plt.ylabel('Loss')
plt.legend()
plt.show()